{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor Motor2 = motor(PORT2, ratio18_1, false);\n\nmotor Motor20 = motor(PORT20, ratio18_1, false);\n\nmotor Motor1 = motor(PORT1, ratio18_1, false);\n\nmotor Motor19 = motor(PORT19, ratio18_1, false);\n\ncontroller Controller1 = controller(primary);\nmotor Motor9Push = motor(PORT9, ratio18_1, false);\n\ninertial Inertial18 = inertial(PORT18);\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable, Rotation, Displacement;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Inertial18.setHeading(0.0, degrees);\n  Inertial18.startCalibration();\n  while (Inertial18.isCalibrating()) { task::sleep(50); }\n  Displacement = 0.0;\n\n  while (true) {\n    // Brain.Screen.print(pow(2, 3));\n    if (Controller1.ButtonA.pressing()) {\n      Displacement = Inertial18.heading(degrees);\n      Displacement = (Displacement/180)*(3.14159265359);\n      \n      // Displacement is now in Radians\n    }\n    if (Controller1.ButtonB.pressing()) {\n      Displacement = 0.0;\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  Motor9Push.setRotation(0.0, degrees);\n  Motor9Push.setStopping(brake);\n  Motor9Push.setVelocity(0.0, percent);\n  while (true) {\n    if (Controller1.ButtonDown.pressing() && Motor9Push.rotation(degrees) < 170.0) {\n      Motor9Push.setVelocity(100.0, percent);\n      Motor9Push.spin(forward);\n    } else if (Controller1.ButtonUp.pressing() && Motor9Push.rotation(degrees) > -477.0) {\n      Motor9Push.setVelocity(100.0, percent);\n      Motor9Push.spin(reverse);\n    } else {\n      Motor9Push.stop();\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted3() {\n  Motor1.setStopping(brake);\n  Motor2.setStopping(brake);\n  Motor19.setStopping(brake);\n  Motor20.setStopping(brake);\n  while (true) {\n    float r = sqrt(pow(Controller1.Axis1.position(), 2) + pow(Controller1.Axis2.position(), 2));\n    float theta = atan(Controller1.Axis2.position() / Controller1.Axis1.position());\n    theta = theta - Displacement;\n    float horizontal = r * cos(theta);\n    float vertical = r * sin(theta);\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"Horizontal Input: \");\n    Brain.Screen.print(Controller1.Axis1.position());\n    Brain.Screen.setCursor(2, 2);\n    Brain.Screen.print(\"Horizontal Output: \");\n    Brain.Screen.print(horizontal);\n    Brain.Screen.setCursor(3, 3);\n    Brain.Screen.print(\"Theta: \");\n    Brain.Screen.print(atan(Controller1.Axis2.position() / Controller1.Axis1.position()));    \n    if (fabs(static_cast<float>((horizontal + vertical) + Controller1.Axis4.position())) > 4.0) {\n      Motor2.setVelocity((2.0 * ((horizontal + vertical) + Controller1.Axis4.position())), rpm);\n      Motor2.spin(forward);\n    }\n    else {\n      Motor2.stop();\n    }\n    if (fabs(static_cast<float>((vertical - horizontal) + Controller1.Axis4.position())) > 4.0) {\n      Motor20.setVelocity((2.0 * ((vertical - horizontal) + Controller1.Axis4.position())), rpm);\n      Motor20.spin(forward);\n    }\n    else {\n      Motor20.stop();\n    }\n    if (fabs(static_cast<float>((0.0 - (vertical - horizontal)) + Controller1.Axis4.position())) > 4.0) {\n      Motor1.setVelocity((2.0 * ((0.0 - (vertical - horizontal)) + Controller1.Axis4.position())), rpm);\n      Motor1.spin(forward);\n    }\n    else {\n      Motor1.stop();\n    }\n    if (fabs(static_cast<float>((0.0 - (vertical + horizontal)) + Controller1.Axis4.position())) > 4.0) {\n      Motor19.setVelocity((2.0 * ((0.0 - (vertical + horizontal)) + Controller1.Axis4.position())), rpm);\n      Motor19.spin(forward);\n    }\n    else {\n      Motor19.stop();\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  vex::task ws1(whenStarted2);\n  vex::task ws2(whenStarted3);\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[2],"name":"Motor2","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[20],"name":"Motor20","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"Motor1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[19],"name":"Motor19","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[9],"name":"Motor9Push","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[18],"name":"Inertial18","customName":false,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}